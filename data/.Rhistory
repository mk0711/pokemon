intro_example <- function(first_name, last_name) {
result <- paste0("Hi, my name is ", first_name, " ", last_name, ". Nice to meet you!")
result
}
intro <- intro_example("Jeeyoung", "Kim")
print(intro)
nums <- c(1, 2, 3, 4, 5)
print(nums)
hybrid <- c("one", 2, 3, "four")
print(hybrid)
nums2 <- 1:100
print(nums2)
nums3 <- seq(1,100)
print(nums3)
odd <- seq(1,100,2)
print(odd)
v1 <- c(1,2,3,4,5,6)
v2 <- seq(1,6)
print(v1, v2)
print(v2)
v1 + v2
odd
nums3
food
v1 + v2
v3 <- c(1,2,3,4,5,6)
v4 <- c(10, 20, 30)
v3 + v4
test1 <- c("a","b", "c")
test2 <- c("a", "b","c")
test1 + test2
print(favorite_food)
favorite_food <- c("Pizza", "sushi", "pad thai", "ramen", "cheese burgers", "chicken soup")
print(favorite_food)
today_dinner <- favorite_food[2]
today_dinner
five_course_meal <- favorite_food[-6]
five_course_meal
indices <- c(1,2,3)
extracted_three <- favorite_food[indices]
three_course_meal <- favorite_food[1:3]
three_course_meal
favorite_food[2] <- "tacos"
print(favorite_food)
person <- list(first_name = "Patrick", last_name = "Star", job = "Software Engineer",
salary = 100000, fovorites = list(food = "Krabby Patty", movie = "Coraline"))
person$first_name
person$fovorites$food
person[["first_name"]]
person2 <- list("Spongebob", "Squarepants", "fry cook", 70000)
person2[[4]]
person2[[4]]
odd
if (temp1 < 0) {
print("It is Cold")
} else if(temp1 == 0) {
print("IT is freezing")
}
temp1 <- 0
if (temp1 < 0) {
print("It is Cold")
} else if(temp1 == 0) {
print("IT is freezing")
}
temp1 <- 0
if (temp1 < 0) {
print("It is Cold")
} else if(temp1 = 0) {
print("IT is freezing")
}
temp1 <- 0
if (temp1 < 0) {
print("It is Cold")
} else if(temp1 == 0) {
print("IT is freezing")
} else if(temp1 < 5) {
print("It is above freezing.")
} else {
print("UM")
}
install.packages("stringr")
library("stringr")
nom <- "pad thai"
favorite_food <- "pad thai"
print(Favorite_food)
print(favorite_food)
age <- 21
name <- "Jeeyoung"
print(age)
print(name)
older_than_7 <- age > 7
print(older_than_7)
food <- "Pizza"
calories <- 1500
health <- calories < 1500
healthy <- calories < 1500
print(healthy)
intro_exampe <- function(first_name, last_name) {
result <- paste("Hi, my name is", first_name, last_name, ". Nice to meet you!")
return(result)
}
intro <- intro_example("Jeeyoung", "Kim")
intro_example <- function(first_name, last_name) {
result <- paste("Hi, my name is", first_name, last_name, ". Nice to meet you!")
return(result)
}
intro <- intro_example("Jeeyoung", "Kim")
print(intro)
intro_example <- function(first_name, last_name) {
result <- paste0("Hi, my name is ", first_name," ", last_name, ". Nice to meet you!")
return(result)
}
intro <- intro_example("Jeeyoung", "Kim")
print(intro)
excited_intro <- function(first_name, last_name) {
all_caps <- str_to_upper(intro_example(first_name, last_name))
return(all_caps)
}
excited <- excited_intro("Jeeyoung", "Kim")
print(excited)
movie_example <- function(movie_name){
output <- paste(move_name, "is a great movie!")
return(output)
}
movie_example <- function(movie_name){
output <- paste(move_name, "is a great movie!")
return(output)
}
print(move_example('Joker'))
movie_example <- function(movie_name){
output <- paste(move_name, "is a great movie!")
return(output)
}
print(movie_example('Joker'))
movie_example <- function(movie_name){
output <- paste(movie_name, "is a great movie!")
return(output)
}
print(movie_example('Joker'))
movie_example <- function(movie_name){
output <- paste(movie_name, "is a great movie!")
return(output)
}
print(movie_example('Joker'))
[0-9]
[0-9]
str <- str_remove_all("[:digit:]", "info439")
library(stringr)
str <- str_remove_all("[:digit:]", "info439")
digits <- ("[:digit:]")
str <- str_remove_all([0-9], "info439")
str <- str_remove_all([:digit:], "info439")
str <- str_remove_all("info439", "[0-9]")
digits <- ("[0-9]")
str <- grep("info439", "[0-9]")
str <- grep("[0-9]", "INFO430")
test <- str_remove_all("info43030", "[:digit:]")
numbers <- seq(700, 999)
rint(median(numbers))
print(median(numbers))
##Median example
onetwo <- c(1,2)
print(median(onetwo))
onetwothree<- c(1,2,3)
print(median(onetwothree))
clear()
person <- list("name" = "David", "age" = 25, "job" = "professor")
print(perso$name)
print(person$name)
print(person[['age']])
data()
titanic_df <- data.frame('Titanic')
View(titanic_df)
titanic_df <- data.frame(Titanic)
View(titanic_df)
employees <- c(paste0("Employee", 1:100))
print(employees)
salaries_2016 <- runif(100, 40000, 50000)
print(salaries_2016)
salaries_2017 <- salaries_2016 + runif(100, -5000, 10000)
employee <- data.frame(employees, salaries_2016, salaries_2017)
View(employee)
employee$change <- salaries_2017 - salaries_2016
View(employee)
employee$got.raise <- employee$change > 0
View(employee)
salary_employee57 <- employee[employee$employees == 'employee57', 'salaries_2017']
print(salary_employee57)
salary_employee57 <- employee[employee$employees == 'employee57', salaries_2017]
salary_employee57 <- employee[employee$employees == 'employee57', employee$salaries_2017]
salary_employee57 <- employee[employee$employees == 'Employee57', employee$salaries_2017]
salary_employee57 <- employee[employee$employees == 'Employee57', 'salaries_2017']
print(salary_employee57)
got_raise <- nrow(employee[employee$got.raise == TRUE, ])
print(got_raise)
highest.raise <- max(employee$change)
print(highest.raise)
good_employee <- employee[employee$change == highest.raise, 'employees']
View(good_employee)
View(good_employee)
list <- list(NA, 2, 3, 4, 10)
mean(list,na.rm=TRUE)
mean(list,na.rm=FALSE)
mean(list, na.rm=FALSE)
mean(list, na.rm=TRUE)
#Exercise 1: working with built in R data
data()
View(titanic_df)
get_col_mean <- function(col_name, data_frame) {
new_vector <- data_frame[[col_name]]
mean_of_vector <- mean(new_vector, na.rm = TRUE)
}
get_col_mean("Freq",titanic_df )
print(get_col_mean)
test <- get_col_mean("Freq",titanic_df )
print(test)
lintr:::addin_lint()
knitr::opts_chunk$set(echo = TRUE)
rlnorm(10000, 63030, 89930 )
rlnorm(10000, 63030, 89930 )
rlnrom(3, 63030, 89930)
rlrom(3, 63030, 89930)
rlnorm(3, log(63030), 89930)
sigma <- sqrt(2 * (log(89930) - log(63030)))
rlnorm(10000, mue, sigma)
mue <- log(63030)
sigma <- sqrt(2 * (log(89930) - log(63030)))
rlnorm(10000, mue, sigma)
nums <- rlnorm(10000, mue, sigma)
mean(nums)
median(nums)
nums_sample <- sample(nums, 1000)
print(nums_sample)
survey_mean <- mean(survey)
survey <- sample(nums, 1000)
survey_mean <- mean(survey)
print(survey_mean)
r_hist(survey)
hist(survey)
hist(survey)
survey2 <- sample(nums, 1000)
survey_mean2 <- mean(survey2)
hist(survey2, sep=30)
survey2 <- sample(nums, 1000)
survey_mean2 <- mean(survey2)
hist(survey2, breaks=30)
survey3 <- sample(nums, 1000)
survey_mean3 <- mean(survey3)
hist(survey3, breaks=30)
nums2 <- rlnorm(10000, mue, sigma)
survey2 <- sample(nums2, 1000)
survey_mean2 <- mean(survey2)
hist(survey2, breaks=30)
nums3 <- rlnorm(10000, mue, sigma)
survey3 <- sample(nums3, 1000)
survey_mean3 <- mean(survey3)
hist(survey3, breaks=30)
nums3 <- rlnorm(10000, mue, sigma)
survey3 <- sample(nums3, 1000)
survey_mean3 <- mean(survey3)
hist(survey3, breaks=30)
mean(survey)
median(survey)
large_survey <- (1:2000, mean, nums)
large_survey <- ((1:2000), mean, nums)
large_survey <- (seq(1:2000), mean, nums)
large_survey <- sapply(seq(1:2000), mean, nums)
large_survey <- sapply(1:2000, mean, nums)
large_survey <- sapply(1:2000,1,  mean, nums)
large_survey <- sapply(1:2000, 1, mean, nums)
large_survey <- sapply((1:2000), 1, mean, nums)
large_survey <- sapply((1:2000), mean, nums)
large_survey <- lapply((1:2000), mean, nums)
large_survey <- sapply((1:2000), mean)
large_survey
```{r}
large_survey <- sapply((1:2000), mean)
vec <- seq(1:2000)
large_survey <- sapply(vec, mean, nums)
sample_big <- sample(2000, nums)
sample_big <- sample(nums, 2000)
large_survey <- sapply(sample_big, mean)
large_survey
large_survey <- sapply(sample(nums, 2000), mean)
large_survey
large_survey <- sapply(1:10000, function(x) sample(nums, 1000)%>% mean())
library(dplyr)
library(dplyr)
large_survey <- sapply(1:10000, function(x) sample(nums, 1000)%>% mean())
large_survey
large_survey_mean <- mean(large_survey)
large_survey_mean
89884.53 - 89,930
89884.53 - 89930
hist(large_survey)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
observation1 <- mean(nums)
survey <- sample(nums, 1000)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
mue <- log(63030)
sigma <- sqrt(2 * (log(89930) - log(63030)))
rlnorm(10000, mue, sigma)
nums <- rlnorm(10000, mue, sigma)
mean_num <- round(mean(nums), 2)
median_num <- round(median(nums), 2)
survey <- sample(nums, 1000)
survey_mean <- mean(survey)
hist(survey)
mean(survey)
median(survey)
nums2 <- rlnorm(10000, mue, sigma)
survey2 <- sample(nums2, 1000)
survey_mean2 <- mean(survey2)
hist(survey2, breaks=30)
mean(nums2)
median(nums2)
nums3 <- rlnorm(10000, mue, sigma)
survey3 <- sample(nums3, 1000)
survey_mean3 <- mean(survey3)
hist(survey3, breaks=30)
median(nums3)
mean(nums3)
observation1 <- mean(nums)
observation2 <- mean(nums2)
observation3 <- mean(nums3)
large_survey <- sapply(1:10000, function(x) sample(nums, 1000)%>% mean())
large_survey_mean <- mean(large_survey)
89884.53 - 89930
hist(large_survey)
hist(survey)
mean(survey)
median(survey)
observation1 <- mean(nums)
observation2 <- mean(nums2)
observation3 <- mean(nums3)
hist(large_survey)
q <- quantile(large_survey_mean, c(0.025,0.975))
q <- quantile(large_survey_mean, c(0.025,0.975))
q
q <- quantile(large_survey, c(0.025,0.975))
q
large_survey_med <- sapply(1:10000, function(x) sample(nums, 1000)%>% median())
large_survey_median <- median(large_survey_med)
hist(large_survey_median)
large_survey_med <- sapply(1:10000, function(x) sample(nums, 1000)%>% median())
large_survey_median <- median(large_survey_med)
large_survey_med <- sapply(1:10000, function(x) sample(nums, 1000)%>% median())
large_survey_median <- median(large_survey_med)
hist(large_survey_med)
large_survey_median <- median(large_survey_med)
hist(large_survey_med)
q2 <- quantile(large_survey_med, c(0.025,0.975))
mue <- log(63030)
sigma <- sqrt(2 * (log(89930) - log(63030)))
rlnorm(10000, mue, sigma)
nums <- rlnorm(10000, mue, sigma)
x <- sample(nums, 1000)
means <- sapply(1:10, function(i) mean(sample(nums, 1000)))
hist(means)
sd(means)
means <- sapply(1:1000, function(i) mean(sample(nums), 1000))
mean(means)
median(means)
nums <- rlnorm(10000, mue, sigma)
means <- sapply(1:10, function(i) mean(sample(nums, 1000)))
mean(means)
median(means)
x <- sample(nums, 1000); mean(x)
sd(x)
sd(means)
hist(means)
hist(means, breaks=100)
hist(nums, breaks=1000)
means <- sapply(1:10, function(i) mean(sample(nums, 1000)))
hist(nums, breaks=1000)
hist(means, breaks=1000)
quantile(means, c(0.025, 0.975))
means <- sapply(1:1000, function (i) mean(rbinom(1, 1, 0.5))
q
rbinom(100, 1, 0.5)
means <- sapply(1:1000, function (i) mean(rbinom(1, 1, 0.5))
means
means <- sapply(1:1000, function (i) mean(rbinom(1, 1, 0.5)))
means
hist(means, breaks = 30)
mu <- mean(nums)
sigma <- sqrt(var(nums)/1000)
mu -1.96*sigma
mu+ 1.96*sigma
quantile(means, c(0.025, 0.975))
# Install and load the `shiny` package
library("shiny")
# Install and load the `shiny` package
install.packages("shiny")
library("shiny")
# Exercise 1: Shiny basics
# Install and load the `shiny` package
# install.packages("shiny")
library("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput('price', label="Price (in dollars)", value=0, min=0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput('quantity', label="Quantity", value=1, min=1),
# The word "Cost", strongly bolded
strong('Cost'),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput('cost')
)
# Install and load the `shiny` package
install.packages("shiny")
height <- c(1,2,3,4,5)
height(5)
height[length[height]]
height(length(height))
?dplyr
? dplyr
mtrx <- matrix(1:5, 3, 2)
mtrx[, -1]
mtrx <- matrix(1:6, 3, 2)
mtrx[, -1]
unclass(as.Date("1971-01-01"))
food <- "Pizza"
print(food)
caloires <- 2000
print(calories)
calories <- 2000
print(calories)
healthy <- calories < 1500
healthy <- calories < 1500
print(healthy)
my_name <- "Jeeyoung"
intro <- "Hi, my name is"
full_intro1 <- paste(intro, my_name)
full_intro1
full_intro2 <- paste0(intro, my_name)
full_intro2
full_intro1 <- paste(intro, my_name)
full_intro1
intro_example <- function(first_name, last_name) {
output <- paste0("Hi, my name is", first_name, last_name, ".", "Nice to meet you")
return(output)
}
test <- intro_example("Jeeyoung", "Kim")
test
intro_example <- function(first_name, last_name) {
output <- paste0("Hi, my name is ", first_name, " ", last_name, ". ", "Nice to meet you")
return(output)
}
test <- intro_example("Jeeyoung", "Kim")
test
intro_example <- function(first_name, last_name) {
output <- paste0("Hi, my name is ", first_name, " ", last_name, ". ", "Nice to meet you!")
return(output)
}
test <- intro_example("Jeeyoung", "Kim")
test
[0:9]
(0:9)
output <- gsub(0:9, "", test)
output <- gsub(0:9+, "", test)
output <- gsub([0:9]+, "", test)
tput <- gsub((0:9)+, "", test)
output <- gsub((0:9+), "", test)
output <- gsub(0:9+, "", test)
output <- sub(0:9, "", test)
output <- sub("0:9", "", test)
print(output)
output <- sub("0:9+", "", test)
print(output)
output <- sub("[0:9+]", "", test)
test <- c("info 201", "CSE 143", "INFO 380")
output <- sub("[0:9+]", "", test)
print(output)
output <- gsub("[0:9+]", "", test)
print(output)
output <- gsub("[0:9]", "", test)
print(output)
output <- gsub("[0:9]+", "", test)
print(output)
output <- gsub("[0-9]+", "", vec)
output <- gsub("[0-9]+", "", test)
print(output)
[0-9]
"[0-9]+"
output <- gsub("[0-9]+", "", test)
print(output)
rm(list = ls())
library(stringr)
install.packages("lintr")
library(lintr)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
setwd("~/Desktop/lab1-javascript-visualizations-info474au19/data")
data <- read.csv("admission_predict.csv")
min <- min(data$TOEFL.Score)
min
min2 <- min(data$GRE.Score)
min2
